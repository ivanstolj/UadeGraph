import React, { Component } from 'react';
import Node from './Node'; // Importa el componente Node desde el archivo Node.js
import cytoscape from 'cytoscape'; // Importa la librería Cytoscape
import './Graph.css'; // Importa el archivo CSS para estilos personalizados

class NodeGraph extends Component {
  constructor(props) {
    super(props);
    this.state = {
      nodes: [], // Inicializa el estado para almacenar los nodos del grafo
    };
  }

  async componentDidMount() {
    const node = new Node(); // Crea una instancia del componente Node
    await node.loadFromJSON('/src/carreras/Informatica.json'); // Carga los datos de nodos desde un archivo JSON
    const nodes = node.getAllNodes(); // Obtiene todos los nodos cargados
    this.setState({ nodes }, () => {
      this.renderGraph(); // Después de actualizar el estado, renderiza el grafo
    });
  }

  generateEdges(nodes) {
    const edges = []; // Inicializa un arreglo para almacenar las aristas del grafo

    nodes.forEach((node) => {
      if (node.correlativa && Array.isArray(node.correlativa)) {
        node.correlativa.forEach((correlativaId) => {
          const targetNode = nodes.find((n) => n.id === correlativaId);

          if (targetNode) {
            edges.push({ data: { target: targetNode.id,source: node.id } }); // Agrega una arista entre nodos correlativos
          }
        });
      }
    });

    return edges; // Devuelve el arreglo de aristas generadas
  }

  renderGraph() {
    const { nodes } = this.state; // Obtiene los nodos del estado

    const elements = [
      ...nodes.map((node, index) => ({
        data: { id: node.id, materia: node.materia },
        position: { x: node.nivel * 200, y: (index % 5) * (window.innerHeight / 5) },
      })),
      ...this.generateEdges(nodes),
    ]; // Genera los elementos (nodos y aristas) para el grafo



          data: { id: node.id, materia: node.materia },
          position: { x: node.nivel * 200, y: (index % 5) * (window.innerHeight / 5) },
          style: {
          'background-color': node.nota > 4 ? 'green' : 'orange', // Cambia el color a verde si la nota es mayor a 4
          width: '100px',
          height: '50px',
          'font-size': '14px',
          'font-weight': 'normal',
          'text-wrap': 'wrap',
          shape: 'roundrectangle',
          'border-radius': '10px',
          content: 'data(id)', // Mostrar el valor de la etiqueta y la nota del nodo como contenido
          'text-valign': 'center',
          'text-halign': 'center',


    const cy = cytoscape({
      container: document.getElementById('graph-id'), // Define el contenedor donde se renderizará el grafo
      elements, // Define los elementos del grafo
      style: [
        {
          selector: 'node', // Estilos para los nodos
          style: {
            'background-color': 'orange',
            width: '100px',
            height: '50px',
            'font-size': '14px',
            'font-weight': 'normal',
            'text-wrap': 'wrap',
            shape: 'roundrectangle', // Usar la forma 'roundrectangle' para bordes curvos
            'border-radius': '10px', // Establecer el radio de los bordes curvos
            content: 'data(materia)', // Mostrar el valor de la etiqueta del nodo
            'text-valign': 'center',
            'text-halign': 'center',
          },
        },
        {
          selector: 'edge', // Estilos para las aristas
          style: {
            width: 2,
            'line-color': 'gray',
            'target-arrow-color': 'lightblue',
            'target-arrow-shape': 'triangle',
            'curve-style': 'unbundled-bezier',
            'control-point-step-size': 30, // Ajusta este valor para controlar la curvatura
          },
        },
      ],
      layout: {
        name: 'preset', // Disposición predefinida para la posición de los elementos
      },
    }); // Crea una instancia de Cytoscape y configura el grafo
    
  }

  render() {
    return (
      <div style={{ width: '100%', height: '100vh' }}>
        <h1>Graph de Nodos</h1>
        <div id="graph-id" className="graph-container" style={{ width: '100vw', height: '100vh', margin: 'auto' }}></div>
      </div>
    ); // Renderiza el componente del grafo con un título y un contenedor
  }
}

export default NodeGraph; // Exporta el componente NodeGraph
