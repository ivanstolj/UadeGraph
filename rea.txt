import React, { Component } from 'react';
import Node from './Node'; // Importa la clase Node que has proporcionado
import { Graph } from 'react-d3-graph'; // Importa el componente Graph de react-d3-graph
import './Graph.css'; // Importa los estilos CSS


class NodeGraph extends Component {
  constructor(props) {
    super(props);
    this.state = {
      nodes: [],
    };
  }

  async componentDidMount() {
    const node = new Node();
    await node.loadFromJSON('/src/carreras/Informatica.json'); // Reemplaza con la ruta correcta
    const nodes = node.getAllNodes();
  // Agrega la información de las correlativas a cada nodo
    nodes.forEach((nodeItem) => {
      nodeItem.correlativa = nodeItem.correlativa || []; // Asegúrate de que correlativa sea un array incluso si es nulo
    });
    this.setState({ nodes });
  }

  generateLinks(nodes) {
    const links = [];

    nodes.forEach((node) => {
      if (node.correlativa && Array.isArray(node.correlativa)) {
        node.correlativa.forEach((correlativaId) => {
          // Busca el nodo correspondiente en la lista de nodos por su ID
          const targetNode = nodes.find((n) => n.id === correlativaId);

          if (targetNode) {
            links.push({ source: node.id, target: targetNode.id });
          }
        });
      }
    });

    return links;
  }

  render() {
    const { nodes } = this.state;

    
    // Define los datos del grafo
    const data = {
      nodes: nodes.map((node, index) => ({
        id: node.id,
        label: node.label,

        x: node.nivel * 150, // Ajusta la posición horizontal de los nodos
        y: (index%5) * 125+125, // Ajusta la posición vertical de los nodos
      })),
      links: this.generateLinks(nodes), // Genera las aristas entre los nodos
    };
    
    

    // Configuración del grafo
    const graphConfig = {
      //panAndZoom: true, // Habilita el zoom y arrastre
      //nodeHighlightBehavior: true,
      staticGraph: true, // Establece el grafo como estático
      width: window.innerWidth, // Utiliza el ancho de la ventana
      height: window.innerHeight, // Utiliza la altura de la ventana
      node: {
        color: 'orange',
        size: 5000, // Ajusta el tamaño de los nodos
        fontSize: 14, // Ajusta el tamaño de la fuente del texto en los nodos
        labelProperty: 'label', // Define la propiedad para mostrar dentro del nodo
        labelPosition: 'center', // Alinea el texto al centro del nodo
        renderLabel: true, // Habilita la renderización de la etiqueta
        fontWeight: 'normal', // Desactiva el estilo de texto en negrita
        symbolType:'square',
      },
      link: {
        highlightColor: 'lightblue',
        renderLabel: true, // Habilita la renderización de etiquetas en los enlaces
        labelProperty: 'type', // Utiliza la propiedad 'type' para las etiquetas de los enlaces
        strokeWidth: 2, // Ancho del enlace
        strokeColor: 'gray', // Color del enlace
        type:"CURVE_SMOOTH",
      },

    };
    
    return (
      <div>
        <h1>Graph de Nodos</h1>
        {/* Renderiza el grafo utilizando react-d3-graph */}
        <Graph id="graph-id" data={data} config={graphConfig} />
      </div>
    );
  }
}

export default NodeGraph;
